unit FSD.HistoryProjects.Notifier;

interface

uses
  ToolsAPI,
  System.SysUtils,
  System.Classes,
  System.IniFiles,
  System.DateUtils;

type TFSDHistoryProjectsNotifier = class(TNotifierObject, IOTANotifier, IOTAIDENotifier)

  protected
    FIndex: Integer;

    { This procedure is called for many various file operations within the
      IDE }
    procedure FileNotification(NotifyCode: TOTAFileNotification; const FileName: string; var Cancel: Boolean);
    { This function is called immediately before the compiler is invoked.
      Set Cancel to True to cancel the compile }
    procedure BeforeCompile(const Project: IOTAProject; var Cancel: Boolean); overload;
    { This procedure is called immediately following a compile.  Succeeded
      will be true if the compile was successful }
    procedure AfterCompile(Succeeded: Boolean); overload;
  public
    constructor create;
    class function New: IOTAIDENotifier;
    destructor Destroy; override;
end;

procedure RegisterHistoryProjectsNotifier;

implementation

procedure RegisterHistoryProjectsNotifier;
begin
  TFSDHistoryProjectsNotifier.New;
end;

{ TFSDHistoryProjectsNotifier }

procedure TFSDHistoryProjectsNotifier.AfterCompile(Succeeded: Boolean);
begin

end;

procedure TFSDHistoryProjectsNotifier.BeforeCompile(
  const Project: IOTAProject; var Cancel: Boolean);
begin

end;

constructor TFSDHistoryProjectsNotifier.create;
begin
  FIndex := (BorlandIDEServices as IOTAServices)
                .AddNotifier(Self);
end;

destructor TFSDHistoryProjectsNotifier.Destroy;
begin
  (BorlandIDEServices as IOTAServices).RemoveNotifier(FIndex);
  inherited;
end;

procedure TFSDHistoryProjectsNotifier.FileNotification(
    NotifyCode: TOTAFileNotification;
    const FileName: string;
    var Cancel: Boolean);
var
  fileExt: String;
  iniFile: TIniFile;
  iniFileName: String;
begin
  Cancel := False;
  fileExt:= ExtractFileExt(FileName);

  if (not fileExt.Equals('.dproj')) and
     (not fileExt.Equals('.groupproj')) or
     (NotifyCode <> ofnFileOpened)
  then
    Exit;

  iniFileName := ExtractFilePath(GetModuleName(HInstance)) +
    '\SeniorDeveloper\HistoryProjects.ini';

  ForceDirectories(ExtractFilePath( iniFileName));
  iniFile := TIniFile.Create(iniFileName);
  try
    iniFile.WriteString(FileName, 'ProjectName',
    ExtractFileName(FileName).Replace(fileExt, ''));
  finally
    iniFile.Free;
  end;
end;

class function TFSDHistoryProjectsNotifier.New: IOTAIDENotifier;
begin
  result := Self.Create;
end;

end.
