unit FSD.NewProject.NewUnit.Component.ConnectionInterfaces;

interface

uses
  ToolsAPI,
  Vcl.Dialogs,
  DCCStrs,
  System.SysUtils,
  System.Classes;

type
  TFSDNewProjectNewUnitConnectionInterfaces = class(TNotifierObject, IOTACreator, IOTAModuleCreator)

  private
    FNamespace: String;
    FUnitPath : string;
    FUnitName : string;
    FUnitFileName: string;

  protected
    { Return a string representing the default creator type in which to augment.
      See the definitions of sApplication, sConsole, sLibrary and
      sPackage, etc.. above.  Return an empty string indicating that this
      creator will provide *all* information }
    function GetCreatorType: string;
    { Return False if this is a new module }
    function GetExisting: Boolean;
    { Return the File system IDString that this module uses for reading/writing }
    function GetFileSystem: string;
    { Return the Owning module, if one exists (for a project module, this would
      be a project; for a project this is a project group) }
    function GetOwner: IOTAModule;
    { Return true, if this item is to be marked as un-named.  This will force the
      save as dialog to appear the first time the user saves. }
    function GetUnnamed: Boolean;

    { Return the Ancestor form name }
    function GetAncestorName: string;
    { Return the implementation filename, or blank to have the IDE create a new
      unique one. (C++ .cpp file or Delphi unit) NOTE: If a value is returned then it *must* be a
      fully qualified filename.  This also applies to GetIntfFileName and
      GetAdditionalFileName on the IOTAAdditionalFilesModuleCreator interface. }
    function GetImplFileName: string;
    { Return the interface filename, or blank to have the IDE create a new
      unique one.  (C++ header) }
    function GetIntfFileName: string;
    { Return the form name }
    function GetFormName: string;
    { Return True to Make this module the main form of the given Owner/Project }
    function GetMainForm: Boolean;
    { Return True to show the form }
    function GetShowForm: Boolean;
    { Return True to show the source }
    function GetShowSource: Boolean;
    { Create and return the Form resource for this new module if applicable }
    function NewFormFile(const FormIdent, AncestorIdent: string): IOTAFile;
    { Create and return the Implementation source for this module. (C++ .cpp
      file or Delphi unit) }
    function NewImplSource(const ModuleIdent, FormIdent, AncestorIdent: string): IOTAFile;
    { Create and return the Interface (C++ header) source for this module }
    function NewIntfSource(const ModuleIdent, FormIdent, AncestorIdent: string): IOTAFile;
    { Called when the new form/datamodule/custom module is created }
    procedure FormCreated(const FormEditor: IOTAFormEditor);

  public
    constructor create(ProjectPath, Namespace: string);
    class function New(ProjectPath, Namespace: string): IOTACreator;
  end;

  TUnitConnectionInterfaceFile = class(TNotifierObject, IOTAFile)
  private
    FNamespace: string;

  protected
    function GetSource: string;
    function GetAge: TDateTime;

  public
    constructor create(Namespace: String);
    class function New(Namespace: String): IOTAFile;
  end;

procedure CreateUnitComponentConnectionInterfaces(Path, Namespace: String);

implementation

procedure CreateUnitComponentConnectionInterfaces(Path, Namespace: String);
var
  unitName: String;
  unitPath: string;
  unitFileName: string;
begin
  unitPath  := ExtractFilePath(GetActiveProject.FileName) + '\Source\Model\Components\Connection\';
  unitName  := Namespace + '.Components.Connection.Interfaces';
  unitFileName := unitPath + unitName + '.pas';

  ForceDirectories(unitPath);

  with TStringList.Create do
  try
    Add('unit %0:s.Components.Connection.Interfaces;');
    Add('');
    Add('interface');
    Add('');
    Add('uses');
    Add('  Data.DB, ');
    Add('  System.SysUtils,');
    Add('  System.Classes;');
    Add('');
    Add('type');
    Add('  I%0:sComponentsConnection = interface');
    Add('    [''%1:s'']');
    Add('  end;');
    Add('');
    Add('implementation');
    Add('');
    Add('end.');

    Text := Format(Text, [Namespace, TGuid.NewGuid.ToString]);
  finally
    Free;
  end;
end;

end.
