unit FSD.NewProject.NewForm.Main;

interface

uses
  Vcl.Dialogs,
  ToolsAPI,
  DCCStrs,
  System.SysUtils,
  System.Classes,
  FSD.NewProject.NewForm.Main.SourceFile;

type TFSDNewProjectMainFormCreator = class(TNotifierObject, IOTACreator, IOTAModuleCreator)

  private
    FProjectPath: string;
    FUnitPath: string;
    FUnitName: string;
    FUnitFileName: string;
    FNamespace: String;

  protected
    function GetCreatorType: string;
    function GetExisting: Boolean;
    function GetFileSystem: string;
    function GetOwner: IOTAModule;
    function GetUnnamed: Boolean;

    function GetAncestorName: string;
    { Return the implementation filename, or blank to have the IDE create a new
      unique one. (C++ .cpp file or Delphi unit) NOTE: If a value is returned then it *must* be a
      fully qualified filename.  This also applies to GetIntfFileName and
      GetAdditionalFileName on the IOTAAdditionalFilesModuleCreator interface. }
    function GetImplFileName: string;
    { Return the interface filename, or blank to have the IDE create a new
      unique one.  (C++ header) }
    function GetIntfFileName: string;
    { Return the form name }
    function GetFormName: string;
    { Return True to Make this module the main form of the given Owner/Project }
    function GetMainForm: Boolean;
    { Return True to show the form }
    function GetShowForm: Boolean;
    { Return True to show the source }
    function GetShowSource: Boolean;
    { Create and return the Form resource for this new module if applicable }
    function NewFormFile(const FormIdent, AncestorIdent: string): IOTAFile;
    { Create and return the Implementation source for this module. (C++ .cpp
      file or Delphi unit) }
    function NewImplSource(const ModuleIdent, FormIdent, AncestorIdent: string): IOTAFile;
    { Create and return the Interface (C++ header) source for this module }
    function NewIntfSource(const ModuleIdent, FormIdent, AncestorIdent: string): IOTAFile;
    { Called when the new form/datamodule/custom module is created }
    procedure FormCreated(const FormEditor: IOTAFormEditor);
  public
    constructor create(Namespace: String);
    class function New(Namespace: string): IOTACreator;
end;

implementation

{ TFSDNewProjectMainFormCreator }

constructor TFSDNewProjectMainFormCreator.create(Namespace: String);
var
  module: IOTAModule;
begin
  FNamespace   := Namespace;
  FProjectPath := ExtractFilePath(GetActiveProject.FileName);
  FUnitPath    := FProjectPath + 'Source\View\';
  FUnitFileName:= FUnitPath + FNamespace + '.View.Main.pas';

  ForceDirectories(FUnitPath);

  module := (BorlandIDEServices as IOTAModuleServices).CreateModule(Self);
  module.FileName := FUnitFileName;
  Module.Save(False, True);
end;

procedure TFSDNewProjectMainFormCreator.FormCreated(const FormEditor: IOTAFormEditor);
begin
end;

function TFSDNewProjectMainFormCreator.GetAncestorName: string;
begin
  result := 'TForm';
end;

function TFSDNewProjectMainFormCreator.GetCreatorType: string;
begin
  result := sForm;
end;

function TFSDNewProjectMainFormCreator.GetExisting: Boolean;
begin
  result := False;
end;

function TFSDNewProjectMainFormCreator.GetFileSystem: string;
begin
  result := EmptyStr;
end;

function TFSDNewProjectMainFormCreator.GetFormName: string;
begin
  result := EmptyStr;
end;

function TFSDNewProjectMainFormCreator.GetImplFileName: string;
begin
  result := EmptyStr;
end;

function TFSDNewProjectMainFormCreator.GetIntfFileName: string;
begin
  result := EmptyStr;
end;

function TFSDNewProjectMainFormCreator.GetMainForm: Boolean;
begin
  result := True;
end;

function TFSDNewProjectMainFormCreator.GetOwner: IOTAModule;
begin
  result := GetActiveProject;
end;

function TFSDNewProjectMainFormCreator.GetShowForm: Boolean;
begin
  result := True;
end;

function TFSDNewProjectMainFormCreator.GetShowSource: Boolean;
begin
  result := True;
end;

function TFSDNewProjectMainFormCreator.GetUnnamed: Boolean;
begin
  result := False;
end;

class function TFSDNewProjectMainFormCreator.New(Namespace: string): IOTACreator;
begin
  result := Self.create(Namespace);
end;

function TFSDNewProjectMainFormCreator.NewFormFile(const FormIdent, AncestorIdent: string): IOTAFile;
begin
  result := TFSDNewProjectNewFormMainSourceDFM.New(FNamespace)
end;

function TFSDNewProjectMainFormCreator.NewImplSource(const ModuleIdent, FormIdent, AncestorIdent: string): IOTAFile;
begin
  Result := TFSDNewProjectNewFormMainSourcePAS.New(FNamespace);
end;

function TFSDNewProjectMainFormCreator.NewIntfSource(const ModuleIdent, FormIdent, AncestorIdent: string): IOTAFile;
begin
  result := nil;
end;

end.
