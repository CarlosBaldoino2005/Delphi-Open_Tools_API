unit FSD.Modelo.FormCadastro.Creator;

interface

uses
  Vcl.Dialogs,
  ToolsAPI,
  DCCStrs,
  System.SysUtils,
  System.Classes,
  FSD.Modelo.Classes;

type TFSDModeloFormCadastroCreator = class(TNotifierObject, IOTACreator, IOTAModuleCreator)

  private
    FTabela: TFSDModeloTabela;
    FNamespace: String;

  protected
    function GetCreatorType: string;
    function GetExisting: Boolean;
    function GetFileSystem: string;
    function GetOwner: IOTAModule;
    function GetUnnamed: Boolean;

    function GetAncestorName: string;
    { Return the implementation filename, or blank to have the IDE create a new
      unique one. (C++ .cpp file or Delphi unit) NOTE: If a value is returned then it *must* be a
      fully qualified filename.  This also applies to GetIntfFileName and
      GetAdditionalFileName on the IOTAAdditionalFilesModuleCreator interface. }
    function GetImplFileName: string;
    { Return the interface filename, or blank to have the IDE create a new
      unique one.  (C++ header) }
    function GetIntfFileName: string;
    { Return the form name }
    function GetFormName: string;
    { Return True to Make this module the Cadastro form of the given Owner/Project }
    function GetMainForm: Boolean;
    { Return True to show the form }
    function GetShowForm: Boolean;
    { Return True to show the source }
    function GetShowSource: Boolean;
    { Create and return the Form resource for this new module if applicable }
    function NewFormFile(const FormIdent, AncestorIdent: string): IOTAFile;
    { Create and return the Implementation source for this module. (C++ .cpp
      file or Delphi unit) }
    function NewImplSource(const ModuleIdent, FormIdent, AncestorIdent: string): IOTAFile;
    { Create and return the Interface (C++ header) source for this module }
    function NewIntfSource(const ModuleIdent, FormIdent, AncestorIdent: string): IOTAFile;
    { Called when the new form/datamodule/custom module is created }
    procedure FormCreated(const FormEditor: IOTAFormEditor);
  public
    constructor create(Namespace: String; Tabela: TFSDModeloTabela);
    class function New(Namespace: string; Tabela: TFSDModeloTabela): IOTACreator;
end;

implementation

{ TFSDModeloFormCadastroCreator }

constructor TFSDModeloFormCadastroCreator.create(Namespace: String; Tabela: TFSDModeloTabela);
begin
  FTabela := Tabela;
  FNamespace := Namespace;
end;

procedure TFSDModeloFormCadastroCreator.FormCreated(const FormEditor: IOTAFormEditor);
begin

end;

function TFSDModeloFormCadastroCreator.GetAncestorName: string;
begin

end;

function TFSDModeloFormCadastroCreator.GetCreatorType: string;
begin
  result := sForm;
end;

function TFSDModeloFormCadastroCreator.GetExisting: Boolean;
begin
  result := False;
end;

function TFSDModeloFormCadastroCreator.GetFileSystem: string;
begin
  result := EmptyStr;
end;

function TFSDModeloFormCadastroCreator.GetFormName: string;
begin
  result := EmptyStr;
end;

function TFSDModeloFormCadastroCreator.GetImplFileName: string;
begin
  result := EmptyStr;
end;

function TFSDModeloFormCadastroCreator.GetIntfFileName: string;
begin

end;

function TFSDModeloFormCadastroCreator.GetMainForm: Boolean;
begin

end;

function TFSDModeloFormCadastroCreator.GetOwner: IOTAModule;
begin

end;

function TFSDModeloFormCadastroCreator.GetShowForm: Boolean;
begin

end;

function TFSDModeloFormCadastroCreator.GetShowSource: Boolean;
begin

end;

function TFSDModeloFormCadastroCreator.GetUnnamed: Boolean;
begin

end;

class function TFSDModeloFormCadastroCreator.New(Namespace: string;
  Tabela: TFSDModeloTabela): IOTACreator;
begin

end;

function TFSDModeloFormCadastroCreator.NewFormFile(const FormIdent,
  AncestorIdent: string): IOTAFile;
begin

end;

function TFSDModeloFormCadastroCreator.NewImplSource(const ModuleIdent,
  FormIdent, AncestorIdent: string): IOTAFile;
begin

end;

function TFSDModeloFormCadastroCreator.NewIntfSource(const ModuleIdent,
  FormIdent, AncestorIdent: string): IOTAFile;
begin

end;

end.
